// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package checkout_v1 is a generated GoMock package.
package checkout_v1

import (
	context "context"
	reflect "reflect"
	models "route256/checkout/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockService) AddToCart(ctx context.Context, user int64, sku uint32, count uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", ctx, user, sku, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockServiceMockRecorder) AddToCart(ctx, user, sku, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockService)(nil).AddToCart), ctx, user, sku, count)
}

// DeleteFromCart mocks base method.
func (m *MockService) DeleteFromCart(ctx context.Context, user int64, sku uint32, count uint16) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromCart", ctx, user, sku, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromCart indicates an expected call of DeleteFromCart.
func (mr *MockServiceMockRecorder) DeleteFromCart(ctx, user, sku, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromCart", reflect.TypeOf((*MockService)(nil).DeleteFromCart), ctx, user, sku, count)
}

// ListCart mocks base method.
func (m *MockService) ListCart(ctx context.Context, user int64) (*models.CartInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCart", ctx, user)
	ret0, _ := ret[0].(*models.CartInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCart indicates an expected call of ListCart.
func (mr *MockServiceMockRecorder) ListCart(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCart", reflect.TypeOf((*MockService)(nil).ListCart), ctx, user)
}

// Purchase mocks base method.
func (m *MockService) Purchase(ctx context.Context, user int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Purchase", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Purchase indicates an expected call of Purchase.
func (mr *MockServiceMockRecorder) Purchase(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Purchase", reflect.TypeOf((*MockService)(nil).Purchase), ctx, user)
}
