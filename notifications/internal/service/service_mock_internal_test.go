// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	models "route256/notifications/internal/models"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ListUserHistoryDay mocks base method.
func (m *MockRepository) ListUserHistoryDay(ctx context.Context, userID int64, lastMessageTime *time.Time) ([]models.OrderMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserHistoryDay", ctx, userID, lastMessageTime)
	ret0, _ := ret[0].([]models.OrderMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserHistoryDay indicates an expected call of ListUserHistoryDay.
func (mr *MockRepositoryMockRecorder) ListUserHistoryDay(ctx, userID, lastMessageTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserHistoryDay", reflect.TypeOf((*MockRepository)(nil).ListUserHistoryDay), ctx, userID, lastMessageTime)
}

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// AddToUserHistoryDay mocks base method.
func (m *MockCache) AddToUserHistoryDay(ctx context.Context, msg models.OrderMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToUserHistoryDay", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToUserHistoryDay indicates an expected call of AddToUserHistoryDay.
func (mr *MockCacheMockRecorder) AddToUserHistoryDay(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToUserHistoryDay", reflect.TypeOf((*MockCache)(nil).AddToUserHistoryDay), ctx, msg)
}

// Get mocks base method.
func (m *MockCache) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCache)(nil).Get), ctx, key)
}

// GetLatestMessageTime mocks base method.
func (m *MockCache) GetLatestMessageTime(ctx context.Context, userID int64) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestMessageTime", ctx, userID)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestMessageTime indicates an expected call of GetLatestMessageTime.
func (mr *MockCacheMockRecorder) GetLatestMessageTime(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestMessageTime", reflect.TypeOf((*MockCache)(nil).GetLatestMessageTime), ctx, userID)
}

// GetUserHistoryDay mocks base method.
func (m *MockCache) GetUserHistoryDay(ctx context.Context, userID int64) ([]models.OrderMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserHistoryDay", ctx, userID)
	ret0, _ := ret[0].([]models.OrderMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserHistoryDay indicates an expected call of GetUserHistoryDay.
func (mr *MockCacheMockRecorder) GetUserHistoryDay(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserHistoryDay", reflect.TypeOf((*MockCache)(nil).GetUserHistoryDay), ctx, userID)
}

// Set mocks base method.
func (m *MockCache) Set(ctx context.Context, key string, value any, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheMockRecorder) Set(ctx, key, value, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCache)(nil).Set), ctx, key, value, ttl)
}
