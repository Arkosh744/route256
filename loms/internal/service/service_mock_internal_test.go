// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"
	models "route256/loms/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockRepository) CreateOrder(ctx context.Context, user int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockRepositoryMockRecorder) CreateOrder(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockRepository)(nil).CreateOrder), ctx, user)
}

// CreateOrderItems mocks base method.
func (m *MockRepository) CreateOrderItems(ctx context.Context, orderID int64, items []models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderItems", ctx, orderID, items)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderItems indicates an expected call of CreateOrderItems.
func (mr *MockRepositoryMockRecorder) CreateOrderItems(ctx, orderID, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderItems", reflect.TypeOf((*MockRepository)(nil).CreateOrderItems), ctx, orderID, items)
}

// CreateOrderStatusHistory mocks base method.
func (m *MockRepository) CreateOrderStatusHistory(ctx context.Context, user, orderId int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderStatusHistory", ctx, user, orderId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrderStatusHistory indicates an expected call of CreateOrderStatusHistory.
func (mr *MockRepositoryMockRecorder) CreateOrderStatusHistory(ctx, user, orderId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderStatusHistory", reflect.TypeOf((*MockRepository)(nil).CreateOrderStatusHistory), ctx, user, orderId, status)
}

// CreateReservation mocks base method.
func (m *MockRepository) CreateReservation(ctx context.Context, orderID, warID int64, sku uint32, count uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", ctx, orderID, warID, sku, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockRepositoryMockRecorder) CreateReservation(ctx, orderID, warID, sku, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*MockRepository)(nil).CreateReservation), ctx, orderID, warID, sku, count)
}

// DeleteReservation mocks base method.
func (m *MockRepository) DeleteReservation(ctx context.Context, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReservation", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReservation indicates an expected call of DeleteReservation.
func (mr *MockRepositoryMockRecorder) DeleteReservation(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReservation", reflect.TypeOf((*MockRepository)(nil).DeleteReservation), ctx, orderID)
}

// DeleteStock mocks base method.
func (m *MockRepository) DeleteStock(ctx context.Context, warehouseID int64, sku uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStock", ctx, warehouseID, sku)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStock indicates an expected call of DeleteStock.
func (mr *MockRepositoryMockRecorder) DeleteStock(ctx, warehouseID, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStock", reflect.TypeOf((*MockRepository)(nil).DeleteStock), ctx, warehouseID, sku)
}

// GetOrder mocks base method.
func (m *MockRepository) GetOrder(ctx context.Context, orderID int64) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, orderID)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockRepositoryMockRecorder) GetOrder(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockRepository)(nil).GetOrder), ctx, orderID)
}

// GetOrderItems mocks base method.
func (m *MockRepository) GetOrderItems(ctx context.Context, orderID int64) ([]models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderItems", ctx, orderID)
	ret0, _ := ret[0].([]models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderItems indicates an expected call of GetOrderItems.
func (mr *MockRepositoryMockRecorder) GetOrderItems(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderItems", reflect.TypeOf((*MockRepository)(nil).GetOrderItems), ctx, orderID)
}

// GetReservations mocks base method.
func (m *MockRepository) GetReservations(ctx context.Context, orderID int64) ([]models.ReservationItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservations", ctx, orderID)
	ret0, _ := ret[0].([]models.ReservationItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservations indicates an expected call of GetReservations.
func (mr *MockRepositoryMockRecorder) GetReservations(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservations", reflect.TypeOf((*MockRepository)(nil).GetReservations), ctx, orderID)
}

// GetStocks mocks base method.
func (m *MockRepository) GetStocks(ctx context.Context, sku uint32) ([]models.StockItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStocks", ctx, sku)
	ret0, _ := ret[0].([]models.StockItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStocks indicates an expected call of GetStocks.
func (mr *MockRepositoryMockRecorder) GetStocks(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStocks", reflect.TypeOf((*MockRepository)(nil).GetStocks), ctx, sku)
}

// InsertStock mocks base method.
func (m *MockRepository) InsertStock(ctx context.Context, item models.ReservationItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStock", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertStock indicates an expected call of InsertStock.
func (mr *MockRepositoryMockRecorder) InsertStock(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStock", reflect.TypeOf((*MockRepository)(nil).InsertStock), ctx, item)
}

// UpdateOrderStatus mocks base method.
func (m *MockRepository) UpdateOrderStatus(ctx context.Context, orderID int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockRepositoryMockRecorder) UpdateOrderStatus(ctx, orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockRepository)(nil).UpdateOrderStatus), ctx, orderID, status)
}

// UpdateOrderStatusHistory mocks base method.
func (m *MockRepository) UpdateOrderStatusHistory(ctx context.Context, orderId int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatusHistory", ctx, orderId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatusHistory indicates an expected call of UpdateOrderStatusHistory.
func (mr *MockRepositoryMockRecorder) UpdateOrderStatusHistory(ctx, orderId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatusHistory", reflect.TypeOf((*MockRepository)(nil).UpdateOrderStatusHistory), ctx, orderId, status)
}

// UpdateStock mocks base method.
func (m *MockRepository) UpdateStock(ctx context.Context, warehouseID int64, sku uint32, count uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStock", ctx, warehouseID, sku, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStock indicates an expected call of UpdateStock.
func (mr *MockRepositoryMockRecorder) UpdateStock(ctx, warehouseID, sku, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStock", reflect.TypeOf((*MockRepository)(nil).UpdateStock), ctx, warehouseID, sku, count)
}

// MockOrderStatusSender is a mock of OrderStatusSender interface.
type MockOrderStatusSender struct {
	ctrl     *gomock.Controller
	recorder *MockOrderStatusSenderMockRecorder
}

// MockOrderStatusSenderMockRecorder is the mock recorder for MockOrderStatusSender.
type MockOrderStatusSenderMockRecorder struct {
	mock *MockOrderStatusSender
}

// NewMockOrderStatusSender creates a new mock instance.
func NewMockOrderStatusSender(ctrl *gomock.Controller) *MockOrderStatusSender {
	mock := &MockOrderStatusSender{ctrl: ctrl}
	mock.recorder = &MockOrderStatusSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderStatusSender) EXPECT() *MockOrderStatusSenderMockRecorder {
	return m.recorder
}

// SendOrderStatus mocks base method.
func (m *MockOrderStatusSender) SendOrderStatus(orderID int64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOrderStatus", orderID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOrderStatus indicates an expected call of SendOrderStatus.
func (mr *MockOrderStatusSenderMockRecorder) SendOrderStatus(orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOrderStatus", reflect.TypeOf((*MockOrderStatusSender)(nil).SendOrderStatus), orderID, status)
}
