// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package loms_v1 is a generated GoMock package.
package loms_v1

import (
	context "context"
	reflect "reflect"
	models "route256/loms/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockService) Cancel(ctx context.Context, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockServiceMockRecorder) Cancel(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockService)(nil).Cancel), ctx, orderID)
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, user int64, items []models.Item) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user, items)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, user, items interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, user, items)
}

// Get mocks base method.
func (m *MockService) Get(ctx context.Context, user int64) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, user)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), ctx, user)
}

// Paid mocks base method.
func (m *MockService) Paid(ctx context.Context, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Paid", ctx, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Paid indicates an expected call of Paid.
func (mr *MockServiceMockRecorder) Paid(ctx, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Paid", reflect.TypeOf((*MockService)(nil).Paid), ctx, orderID)
}

// Stocks mocks base method.
func (m *MockService) Stocks(ctx context.Context, sku uint32) ([]models.StockItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stocks", ctx, sku)
	ret0, _ := ret[0].([]models.StockItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stocks indicates an expected call of Stocks.
func (mr *MockServiceMockRecorder) Stocks(ctx, sku interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stocks", reflect.TypeOf((*MockService)(nil).Stocks), ctx, sku)
}
