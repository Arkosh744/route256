version: "3.8"

services:

  checkout:
    image: checkout
    build: ./checkout/
    networks:
      - checkout_network
      - service_network
    ports:
      - "8080:8080"
      - "8088:8088"
      - "50052:50052"

  checkout_postgres:
    image: postgres:15.1
    environment:
      POSTGRES_USER: checkout-user
      POSTGRES_PASSWORD: checkout-pass
      POSTGRES_DB: checkout-db
    networks:
      - checkout_network
    ports:
      - "5439:5432"
    volumes:
      - checkout_postgres_data:/var/lib/postgresql/data/

  checkout_pgbouncer:
    image: edoburu/pgbouncer:latest
    environment:
      DB_USER: checkout-user
      DB_PASSWORD: checkout-pass
      DB_HOST: checkout_postgres
      DB_PORT: 5432
      POOL_MODE: session
      ADMIN_USERS: checkout-user
      AUTH_TYPE: plain
    networks:
      - checkout_network
    ports:
      - "6432:5432"


  loms:
    image: loms
    build: ./loms/
    networks:
      - loms_network
      - service_network
    ports:
      - "50053:50053"
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy

  loms_postgres:
    image: postgres:15.1
    environment:
      POSTGRES_USER: loms-user
      POSTGRES_PASSWORD: loms-pass
      POSTGRES_DB: loms-db
    networks:
      - loms_network
    volumes:
      - loms_postgres_data:/var/lib/postgresql/data/

  loms_pgbouncer:
    image: edoburu/pgbouncer:latest
    environment:
      DB_USER: loms-user
      DB_PASSWORD: loms-pass
      DB_HOST: loms_postgres
      DB_PORT: 5432
      POOL_MODE: session
      ADMIN_USERS: loms-user
      AUTH_TYPE: plain
    networks:
      - loms_network
    ports:
      - "6433:5432"

#  notifications:
#    image: notifications
#    build: ./notifications/
#    ports:
#      - "8082:8082"
#    networks:
#      - service_network
#    deploy:
#      restart_policy:
#        condition: on-failure
#        delay: 5s
#        max_attempts: 3
#    depends_on:
#      kafka1:
#        condition: service_healthy
#      kafka2:
#        condition: service_healthy
#      kafka3:
#        condition: service_healthy

  # kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    networks:
      - service_network
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 10s
      timeout: 10s
      retries: 3
    environment:
      - ZOOKEEPER_SERVER_ID=1
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_INIT_LIMIT=5
      - ZOOKEEPER_SYNC_LIMIT=2
      - ZOOKEEPER_SERVERS=zookeeper:2888:3888
  kafka1:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka1:29091", "--list"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 10s
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9091:9091"
    networks:
      - service_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
    environment:
      - KAFKA_LISTENERS=LISTENER_INT://kafka1:29091,LISTENER_EXT://0.0.0.0:9091
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_INT://kafka1:29091,LISTENER_EXT://${HOST_IP:-localhost}:9091
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_BROKER_ID=1
      - ZOOKEEPER=zookeeper:2181
  kafka2:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka1:29091", "--list"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 10s
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    networks:
      - service_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
    environment:
      - KAFKA_LISTENERS=LISTENER_INT://kafka2:29092,LISTENER_EXT://0.0.0.0:9092
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_INT://kafka2:29092,LISTENER_EXT://${HOST_IP:-localhost}:9092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_BROKER_ID=2
      - ZOOKEEPER=zookeeper:2181
  kafka3:
    image: confluentinc/cp-kafka:latest
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka1:29091", "--list"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 10s
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9093"
    networks:
      - service_network
    deploy:
      restart_policy:
        condition: on-failure
        delay: 3s
        max_attempts: 5
    environment:
      - KAFKA_LISTENERS=LISTENER_INT://kafka3:29093,LISTENER_EXT://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=LISTENER_INT://kafka3:29093,LISTENER_EXT://${HOST_IP:-localhost}:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=LISTENER_INT:PLAINTEXT,LISTENER_EXT:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=LISTENER_INT
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_BROKER_ID=3
      - ZOOKEEPER=zookeeper:2181

networks:
  checkout_network:
  loms_network:
  service_network:

volumes:
  checkout_postgres_data:
  loms_postgres_data:
