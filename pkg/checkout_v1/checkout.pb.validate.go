// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: checkout.proto

package checkout_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CartRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartRequestMultiError, or
// nil if none found.
func (m *CartRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CartRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() <= 0 {
		err := CartRequestValidationError{
			field:  "User",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Sku

	if val := m.GetCount(); val <= 0 || val >= 65535 {
		err := CartRequestValidationError{
			field:  "Count",
			reason: "value must be inside range (0, 65535)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CartRequestMultiError(errors)
	}

	return nil
}

// CartRequestMultiError is an error wrapping multiple validation errors
// returned by CartRequest.ValidateAll() if the designated constraints aren't met.
type CartRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartRequestMultiError) AllErrors() []error { return m }

// CartRequestValidationError is the validation error returned by
// CartRequest.Validate if the designated constraints aren't met.
type CartRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartRequestValidationError) ErrorName() string { return "CartRequestValidationError" }

// Error satisfies the builtin error interface
func (e CartRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartRequestValidationError{}

// Validate checks the field values on OrderIDRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrderIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrderIDRequestMultiError,
// or nil if none found.
func (m *OrderIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUser() <= 0 {
		err := OrderIDRequestValidationError{
			field:  "User",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderIDRequestMultiError(errors)
	}

	return nil
}

// OrderIDRequestMultiError is an error wrapping multiple validation errors
// returned by OrderIDRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderIDRequestMultiError) AllErrors() []error { return m }

// OrderIDRequestValidationError is the validation error returned by
// OrderIDRequest.Validate if the designated constraints aren't met.
type OrderIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderIDRequestValidationError) ErrorName() string { return "OrderIDRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrderIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderIDRequestValidationError{}

// Validate checks the field values on OrderIDResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderIDResponseMultiError, or nil if none found.
func (m *OrderIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetOrderId() <= 0 {
		err := OrderIDResponseValidationError{
			field:  "OrderId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return OrderIDResponseMultiError(errors)
	}

	return nil
}

// OrderIDResponseMultiError is an error wrapping multiple validation errors
// returned by OrderIDResponse.ValidateAll() if the designated constraints
// aren't met.
type OrderIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderIDResponseMultiError) AllErrors() []error { return m }

// OrderIDResponseValidationError is the validation error returned by
// OrderIDResponse.Validate if the designated constraints aren't met.
type OrderIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderIDResponseValidationError) ErrorName() string { return "OrderIDResponseValidationError" }

// Error satisfies the builtin error interface
func (e OrderIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderIDResponseValidationError{}

// Validate checks the field values on ListCartResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListCartResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCartResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCartResponseMultiError, or nil if none found.
func (m *ListCartResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCartResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCartResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCartResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCartResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TotalPrice

	if len(errors) > 0 {
		return ListCartResponseMultiError(errors)
	}

	return nil
}

// ListCartResponseMultiError is an error wrapping multiple validation errors
// returned by ListCartResponse.ValidateAll() if the designated constraints
// aren't met.
type ListCartResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCartResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCartResponseMultiError) AllErrors() []error { return m }

// ListCartResponseValidationError is the validation error returned by
// ListCartResponse.Validate if the designated constraints aren't met.
type ListCartResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCartResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCartResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCartResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCartResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCartResponseValidationError) ErrorName() string { return "ListCartResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListCartResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCartResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCartResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCartResponseValidationError{}

// Validate checks the field values on CartItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CartItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CartItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CartItemMultiError, or nil
// if none found.
func (m *CartItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CartItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sku

	if val := m.GetCount(); val <= 0 || val >= 65535 {
		err := CartItemValidationError{
			field:  "Count",
			reason: "value must be inside range (0, 65535)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Name

	// no validation rules for Price

	if len(errors) > 0 {
		return CartItemMultiError(errors)
	}

	return nil
}

// CartItemMultiError is an error wrapping multiple validation errors returned
// by CartItem.ValidateAll() if the designated constraints aren't met.
type CartItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CartItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CartItemMultiError) AllErrors() []error { return m }

// CartItemValidationError is the validation error returned by
// CartItem.Validate if the designated constraints aren't met.
type CartItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CartItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CartItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CartItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CartItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CartItemValidationError) ErrorName() string { return "CartItemValidationError" }

// Error satisfies the builtin error interface
func (e CartItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCartItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CartItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CartItemValidationError{}
